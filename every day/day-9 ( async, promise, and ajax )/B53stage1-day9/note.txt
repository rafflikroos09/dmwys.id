- Tag element yang akan di pakai ?
- Block element dan inline element ?
- semantic dan non semantic

######################################################
<html>
  <head>
    <title>Personal Web</title>
  </head>

  <body>    
    <h1 style="background-color: blue;">Personal Web v1</h1>
    <p style="color: red; background-color: black; font-size: large;">Personal Web v1</p>
    

    <span style='background-color: yellow;'>Halo</span>
    <span style="background-color: red;">test</span>
  </body>
</html>

border: 1px; border-color: black; border-style: solid;


######################################################
hierarky css -> prioritas css untuk styling.

css => inline css (style="value css"), internal css <style></style>, eksternal css (name-file.css)
urutan hierarky : internal css -> selector (id) -> selector (class) -> tag element


#paragraph {
  color: yellow;
}

.paragraph {
  color: green;
}

p {
  color: blue;
}

body {
  background-color: red;
}


<p class="paragraph" id="paragraph" style="color: red">Ini adalah implementasi hierarky css</p>
<p class="paragraph" id="paragraph">Ini adalah implementasi hierarky css</p>
<p class="paragraph">Ini adalah implementasi hierarky css</p>
<p class="target">Ini adalah implementasi hierarky css</p>
<p class="paragraph" id="paragraph">Ini adalah implementasi hierarky css</p>
<p class="paragraph" id="paragraphv2">Apakah kamu pernah menjual pulau ?</p>
<p class="value">Apakah kamu pernah menjual pulau ?</p>

# => selector id

. => selector class


ul => unorder list
ol => order list
li => list item


layouting (flexbox)
layouting -> tata letak
flexbox -> sistem layouting


######################################################
// i have an error

// console.log(bang)

// console.log("Hello world")
// console.info("Hello worldddddd")


variable
var, const, let.

let names = "Dandi Saputra"
console.log(names)

names = "Megawati"
console.log(names)


const myAge = 15
myAge = 16

console.log(myAge)


const (konstan) = nilainya tidak bisa di ubah
var/let = nilainya dinamis/bisa di ubah/bisa dimasukan ulang
var = versi lama, let = versi terbaru



type data = jenis data
type data = data primitif type data non primitif.
type data primitif = tipe data yang menyimpan satu nilai
type data non primitif = tipe data yang menyimpan lebih dari satu nilai
type data primitif = string, number (float/int), boolean, null, undefined, symbol.
string = "...", '...', `...`
const myName = 'Dandi Saputra'

Hello, My is Dandi Saputra
console.log(`Hello, My is ${myName}`)
console.log("Hellossss, My is " + myName)

const myName = 9879394
const myName = "9879394"
console.log(typeof myName)

Boolean true / false
boolean sering untuk sebuah kondisi.

boolean bisa let / const

let isMarried = true
console.log(typeof isMarried)

null
const data = null
console.log(data)

const nonZero = "ada"
const zero = 0
const data = null
const bang = undefined

console.log(typeof nonZero)
console.log(typeof zero)
console.log(typeof data)
console.log(typeof undefined)


minta data dari server kamu (nama, usia)


console.log(nama, usia)


pengkondisian (conditional) = fungsi yang di kerjakan berdasarkan kondisi tertentu
if else, switch case

if conditional
if (conditional) {
  block code
} else {
  block code
}

member vip = dia di perbolehkan masuk
is not member vip = harus daftar vip
const isVip = false

if(isVip == true) {
  console.log("Silahkan masuk")
} else {
  console.log("Tolong daftar dulu")
}

const age = 100

if(age < 20) {
  console.log("Kamu sudah melewati batas usia beasiswa")
} else if(age < 30) {
  console.log("Ambil kelas reguler")
} else if(age < 40) {
  console.log("Ambil kelas regulerssss")
} else {
  console.log("Maaf anda tidak bisa daftar")
}

&&, ||, !
const value1 = 50
const value2 = 100

if(value1 >= 75 || value2 >= 75) {
  console.log("Kamu lulus")
} else {
  console.log("Remedial");
}



function (fungsi) = sekumpulan code yang akan berjalan apa bila di jalankan / di panggil.
function declaration, function expression, arrow function
deklarasi, jalankan fungsi, parameter, argument, return

function declration
function sayHello() {
  // block code
  // sambungkan ke listrik
  // tekan tombol ke posisi masak
  // tunggu sampai masak
  // buka jika masak
}

// cara menjalankan
sayHello()


// function expression
const sayHello2 = function () {
  // block code
}

// cara menjalankan
sayHello2()


// arrow function
const sayHello3 = () => {
  // block code
}

// cara menjalankan
sayHello3()



function sayHello() {
  console.log("bang")
}

sayHello()


function sayHello(name, isVip) {
  console.log("selamat datang " + name + ", " + isVip + " kamu member vip")
}

sayHello("Dandi Saputra", "ya", "saya ganteng")

function sayHello(name, isVip) {
  console.log("selamat datang " + name + ", " + isVip + " kamu member vip")
}

sayHello("Dandi Saputra")



function membership(name, isVip) {
  if(isVip) {
    let data = `Selamat ${name}, kamu member vip`
    return data
  } else {
    let data = "Maaf tolong daftar dulu"
    return data
  }
}

console.log(membership("Dandi saputra", true))

function membership(name, age) {
  if(age > 17) {
    return `Selamat ${name}, usia kamu saat ini ${age}`
  }

  if(age < 10) {
    return `Selamat ${name}, kamu masih bocil, usia kamu saat ini ${age}`
  } 
}


console.log(membership("Dandi saputra", 9))

==================================================================================
- Inheritance, pewarisan
- Polymorphism, satu method yang sama tpi berbeda berdasarkan
- class, blueprint / centakan
- object, instansi dari sebuah kelas
- encaptulation, membatasi akses dari luar
- abstraction, menyembunyikan sebuah object
- getter ( get() ) dan setter ( set() )

const data  =  {} object data type 


==================================================================================
callback : fungsi sebagai parameter, function yang di sertakan sebagai argument untuk fungsi lain

HOF : Fungsi yang mengambil satu / beberapa sebagai argument, fungsi yang beroperasi pada fungsi lain bisa digunakan sembagai argument / return value